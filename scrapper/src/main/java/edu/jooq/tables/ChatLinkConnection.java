/*
 * This file is generated by jOOQ.
 */
package edu.jooq.tables;


import edu.jooq.DefaultSchema;
import edu.jooq.Keys;
import edu.jooq.tables.records.ChatLinkConnectionRecord;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ChatLinkConnection extends TableImpl<ChatLinkConnectionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>CHAT_LINK_CONNECTION</code>
     */
    public static final ChatLinkConnection CHAT_LINK_CONNECTION = new ChatLinkConnection();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<ChatLinkConnectionRecord> getRecordType() {
        return ChatLinkConnectionRecord.class;
    }

    /**
     * The column <code>CHAT_LINK_CONNECTION.CHAT_ID</code>.
     */
    public final TableField<ChatLinkConnectionRecord, Long> CHAT_ID = createField(DSL.name("CHAT_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>CHAT_LINK_CONNECTION.LINK_ID</code>.
     */
    public final TableField<ChatLinkConnectionRecord, Long> LINK_ID = createField(DSL.name("LINK_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    private ChatLinkConnection(Name alias, Table<ChatLinkConnectionRecord> aliased) {
        this(alias, aliased, null);
    }

    private ChatLinkConnection(Name alias, Table<ChatLinkConnectionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>CHAT_LINK_CONNECTION</code> table reference
     */
    public ChatLinkConnection(String alias) {
        this(DSL.name(alias), CHAT_LINK_CONNECTION);
    }

    /**
     * Create an aliased <code>CHAT_LINK_CONNECTION</code> table reference
     */
    public ChatLinkConnection(Name alias) {
        this(alias, CHAT_LINK_CONNECTION);
    }

    /**
     * Create a <code>CHAT_LINK_CONNECTION</code> table reference
     */
    public ChatLinkConnection() {
        this(DSL.name("CHAT_LINK_CONNECTION"), null);
    }

    public <O extends Record> ChatLinkConnection(Table<O> child, ForeignKey<O, ChatLinkConnectionRecord> key) {
        super(child, key, CHAT_LINK_CONNECTION);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @NotNull
    public UniqueKey<ChatLinkConnectionRecord> getPrimaryKey() {
        return Keys.ID;
    }

    @Override
    @NotNull
    public List<ForeignKey<ChatLinkConnectionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONSTRAINT_B, Keys.CONSTRAINT_BF);
    }

    private transient Chats _chats;
    private transient Links _links;

    /**
     * Get the implicit join path to the <code>PUBLIC.CHATS</code> table.
     */
    public Chats chats() {
        if (_chats == null)
            _chats = new Chats(this, Keys.CONSTRAINT_B);

        return _chats;
    }

    /**
     * Get the implicit join path to the <code>PUBLIC.LINKS</code> table.
     */
    public Links links() {
        if (_links == null)
            _links = new Links(this, Keys.CONSTRAINT_BF);

        return _links;
    }

    @Override
    @NotNull
    public ChatLinkConnection as(String alias) {
        return new ChatLinkConnection(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public ChatLinkConnection as(Name alias) {
        return new ChatLinkConnection(alias, this);
    }

    @Override
    @NotNull
    public ChatLinkConnection as(Table<?> alias) {
        return new ChatLinkConnection(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public ChatLinkConnection rename(String name) {
        return new ChatLinkConnection(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public ChatLinkConnection rename(Name name) {
        return new ChatLinkConnection(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public ChatLinkConnection rename(Table<?> name) {
        return new ChatLinkConnection(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
